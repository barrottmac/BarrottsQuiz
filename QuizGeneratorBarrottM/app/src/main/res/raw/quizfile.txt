This gesture triggers the default functionality for a given item. Action = press, lift$$Gesture - Touch
This gesture enters data selection mode. Allows you to select one or more items in a view and act upon the data using a contextual action bar. Action = press, wait, lift$$Gesture - Long Press 
This gesture scrolls overflowing content, or navigates between views in the same hierarchy. Action = press, move, life$$Gesture - Swipe
This gesture rearranges data within a view, or moves data into a container (e.g. folders on Home Screen). Action = long press, move, lift$$Gesture - Drag 
This gesture zooms into content. Also used as a secondary gesture for text selection. Action = Two touches in quick succession$$Gesture - Double Touch 
This gesture zooms into content. Action = 2-finger press, move outwards, lift$$Gesture - Pinch Open
This gesture zooms out of content. Action = 2-finger press, move inwards, lift$$Gesture - Pinch Close
This is used to navigate within an app based on the hierarchical relationships between screens. For instance, if screen A displays a list of items, and selecting an item leads to screen B (which presents that item in more detail), then screen B should offer an Up button that returns to screen A.$$Up button
This is used to navigate, in reverse chronological order, through the history of screens the user has recently worked with. It is generally based on the temporal relationships between screens, rather than the app's hierarchy.$$System back button
This is arguably the most important structural element of an Android app. It's a dedicated piece of real estate at the top of each screen that is generally persistent throughout the app.$$Action bar
These always take up the entire width of the bar, with the currently active view item in the center, and therefore need to live in a dedicated bar. They can themselves be scrolled horizontally to bring more tabs into view and are often used when you have a large number of views.$$Scrollable tabs
These are always visible on the screen, and can't be moved out of the way. When in the main action bar, they can move to the top bar when the screen orientation changes.$$Fixed tabs
This is a drop-down menu in the main action bar that allows users to switch between views of your app and are often used in place of dedicated tab bars in order to save real estate or when you expect your app’s users to switch views infrequently.$$Spinners
These controls are used on the action bar to ‘surface’ (present for launch) your app's most important activities$$Action buttons
These are a way to make sure that your app consistently provides a balanced and aesthetically pleasing layout by adjusting its content to varying screen sizes and orientations. They allow you to combine multiple views into one compound view when a lot of horizontal screen real estate is available and by splitting them up when less space is available.$$Panels
These allow the user to efficiently move from item to item using a simple gesture and thereby make browsing and consuming data a more fluent experience. Often used where horizontal navigation can flatten vertical hierarchies to make access to related data items faster.$$Swipe views
This is a temporary action bar that overlay your app's current action bar while data is selected. It appears after the user long presses on a selectable data item.$$Contextual action bar (CAB)
This allows your app to keep the user informed about important events, such as new messages in a chat app or a calendar event.$$Notifications (aka Notification System)
These are Android's mechanism for applying a consistent style to an app or activity. The style specifies the visual properties of the elements that make up your user interface, such as color, height, padding and font size.$$Themes
This tray stays at the bottom and always keeps your most important shortcuts and folders in view regardless of which panel is currently showing$$Favorites
